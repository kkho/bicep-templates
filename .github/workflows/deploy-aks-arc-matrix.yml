name: Deploy AKS Arc with Matrix Strategy

on:
  workflow_dispatch:
    inputs:
      environments:
        description: "Environments to deploy (comma-separated: dev,staging,prod)"
        required: true
        default: "dev"
        type: string
      dry_run:
        description: "Perform dry run (validate only)"
        required: false
        default: false
        type: boolean

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  setup:
    name: Setup Deployment Matrix
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.parse-envs.outputs.environments }}

    steps:
      - name: Parse Environments
        id: parse-envs
        run: |
          # Convert comma-separated input to JSON array
          envs="${{ github.event.inputs.environments }}"
          json_array=$(echo $envs | tr ',' '\n' | jq -R . | jq -s .)
          echo "environments=$json_array" >> $GITHUB_OUTPUT
          echo "Parsed environments: $json_array"

  validate:
    name: Validate Templates and Parameters
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.setup.outputs.environments) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/setup-azure-cli@v2
        with:
          version: latest

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep Template
        run: |
          echo "Validating AKS Arc template for environment: ${{ matrix.environment }}"
          az bicep build --file modules/compute/aks-arc/aksarc.bicep

      - name: Validate Parameters File
        run: |
          param_file="modules/compute/aks-arc/parameters/${{ matrix.environment }}.bicepparam"

          if [ -f "$param_file" ]; then
            echo "Found parameter file: $param_file"
            
            # Extract resource group from parameter file for validation
            rg_name="rg-aks-arc-${{ matrix.environment }}"
            
            # Create temporary resource group for validation if it doesn't exist
            az group create --name "$rg_name-validation" --location eastus2 || true
            
            # Validate deployment
            echo "Validating deployment with parameter file..."
            az deployment group validate \
              --resource-group "$rg_name-validation" \
              --template-file modules/compute/aks-arc/aksarc.bicep \
              --parameters "$param_file" \
              --verbose
              
            # Cleanup validation resource group
            az group delete --name "$rg_name-validation" --yes --no-wait || true
          else
            echo "ERROR: Parameter file not found: $param_file"
            exit 1
          fi

      - name: Show What-If Analysis
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          param_file="modules/compute/aks-arc/parameters/${{ matrix.environment }}.bicepparam"
          rg_name="rg-aks-arc-${{ matrix.environment }}"

          echo "What-If Analysis for ${{ matrix.environment }}:"
          az deployment group what-if \
            --resource-group "$rg_name" \
            --template-file modules/compute/aks-arc/aksarc.bicep \
            --parameters "$param_file" \
            --result-format FullResourcePayloads || true

  deploy:
    name: Deploy AKS Arc
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: ${{ github.event.inputs.dry_run == 'false' }}
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.setup.outputs.environments) }}
    environment: ${{ matrix.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Resource Group Exists
        run: |
          rg_name="rg-aks-arc-${{ matrix.environment }}"
          echo "Ensuring resource group exists: $rg_name"
          az group create --name "$rg_name" --location eastus2

      - name: Deploy AKS Arc Cluster
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: rg-aks-arc-${{ matrix.environment }}
          template: modules/compute/aks-arc/aksarc.bicep
          parameters: modules/compute/aks-arc/parameters/${{ matrix.environment }}.bicepparam
          failOnStdErr: false

      - name: Show Deployment Outputs
        run: |
          echo "Deployment completed for ${{ matrix.environment }}"
          echo "Deployment outputs:"
          echo "${{ steps.deploy.outputs }}"

      - name: Post-Deployment Verification
        run: |
          echo "Verifying AKS Arc cluster deployment..."
          rg_name="rg-aks-arc-${{ matrix.environment }}"

          # List all resources in the resource group
          echo "Resources created in $rg_name:"
          az resource list --resource-group "$rg_name" --output table

          # Check if AKS Arc cluster is connected
          cluster_name="aks-arc-${{ matrix.environment }}"
          echo "Checking cluster connectivity..."
          az connectedk8s show --name "$cluster_name" --resource-group "$rg_name" --query "connectivityStatus" --output tsv || echo "Cluster not yet connected"

  notify:
    name: Notify Deployment Results
    runs-on: ubuntu-latest
    needs: [setup, validate, deploy]
    if: always()

    steps:
      - name: Create Deployment Summary
        run: |
          echo "## AKS Arc Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environments Deployed:** ${{ github.event.inputs.environments }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Status:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.dry_run }}" == "false" ]; then
            echo "**Deployment Status:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Parameter Files Used:" >> $GITHUB_STEP_SUMMARY

          # List the parameter files that were used
          for env in $(echo "${{ github.event.inputs.environments }}" | tr ',' ' '); do
            echo "- \`modules/compute/aks-arc/parameters/${env}.bicepparam\`" >> $GITHUB_STEP_SUMMARY
          done
